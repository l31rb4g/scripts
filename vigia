#!/usr/bin/env python
import os
import sys
import time
from subprocess import call
from threading import Thread
from watchdog.observers import Observer
from watchdog.events import PatternMatchingEventHandler


BASE_DIR = os.getcwd()
CACHE = []


def on_event(event):
    filename = event.src_path
    relative_filename = str(filename).replace(BASE_DIR + '/', '')

    ignore = []

    if filename not in ignore:
        seconds = str(int(time.time()))

        if seconds not in CACHE:
            CACHE.append(seconds)
            if len(CACHE) > 1:
                print('======================================')
            print('         --> \033[35m' + relative_filename + '\033[m foi alterado')

            th = Thread(target=execute, args=[filename])
            th.start()


def execute(filename=''):
    cmd = sys.argv[2].replace('%', filename)
    call(cmd, shell=True)


if __name__ == "__main__":
    patterns = str(sys.argv[1])
    handler = PatternMatchingEventHandler(patterns=[patterns])
    handler.on_modified = on_event
    
    print('>>> Vigiando \033[35m{}\033[m'.format(patterns))

    observer = Observer()
    observer.schedule(handler, BASE_DIR, recursive=True)
    observer.start()

    try:
        while True:
            time.sleep(60)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()

